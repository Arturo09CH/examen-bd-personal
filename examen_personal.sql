-- =========================================
-- EXAMEN TÉCNICO - BASE DE DATOS PERSONAL
-- Autor: Arturo Hernández
-- Fecha: 2025-08-11
-- =========================================

-- 1. CREAR BASE DE DATOS
CREATE DATABASE PERSONAL;
USE PERSONAL;

-- 2.1 TABLA ALUMNOS
CREATE TABLE ALUMNOS (
    NOMBRE VARCHAR(100),
    LOGIN INT NOT NULL UNIQUE,
    AREA INT,
    ZONA INT,
    PUESTO INT
);

INSERT INTO ALUMNOS (NOMBRE, LOGIN, AREA, ZONA, PUESTO)
VALUES
('EDGAR', 5654, 1, 1, 1),
('CESAR', 5652, 1, 1, 2),
('URIEL', 5650, 1, 2, 2),
('ISRAEL', 5648, 1, 3, 2),
('JOSUE', 5646, 3, 1, 1),
('FELIPE', 5644, 3, 4, 2),
('GUILLERMO', 5642, 2, 2, 1),
('ALI', 5640, 2, 3, 2),
('MAURO', 5638, 4, 1, 1),
('MIRIAM', 5636, 4, 4, 2),
('RICARDO', 5634, 5, 2, 2),
('LUIS', 5632, 5 , 2, 1),
('JOSE', 5630, 5, 3, 2);

-- 2.2 TABLA AREA
CREATE TABLE AREA (
    IDAREA INT AUTO_INCREMENT PRIMARY KEY,
    DESCRIPCION VARCHAR(50) NOT NULL
);

INSERT INTO AREA (DESCRIPCION) 
VALUES 
('TELEFONIA'),
('IMPLEMENTACION'),
('CAPACITACION'),
('CALIDAD'),
('DESARROLLO');

-- 2.3 TABLA ZONA
CREATE TABLE ZONA (
	IDZONA INT AUTO_INCREMENT PRIMARY KEY,
    DESCRIPCION VARCHAR(50) NOT NULL
);

INSERT INTO ZONA (DESCRIPCION)
VALUES
('DEL VALLE'),
('NARVARTE'),
('RELOX'),
('TORRES');

-- 2.4 TABLA PUESTO
CREATE TABLE PUESTO (
	IDPUESTO INT AUTO_INCREMENT PRIMARY KEY,
    DESCRIPCION VARCHAR(50) NOT NULL
);

INSERT INTO PUESTO (DESCRIPCION)
VALUES
('COORDINADOR'),
('EMPLEADO');

-- =====================================
-- 5. CONSULTAS
-- =====================================

-- 3.1 MOSTRAR A TODOS LOS COORDINADORES.
SELECT 
  A.NOMBRE,
  A.LOGIN,
  AR.DESCRIPCION AS AREA,
  Z.DESCRIPCION AS ZONA,
  P.DESCRIPCION AS PUESTO
FROM ALUMNOS A
JOIN AREA AR ON A.AREA = AR.IDAREA
JOIN ZONA Z ON A.ZONA = Z.IDZONA
JOIN PUESTO P ON A.PUESTO = P.IDPUESTO
WHERE P.DESCRIPCION = 'COORDINADOR';

-- 3.2 MOSTRAR A TODAS LAS PERSONAS QUE LABOREN EN LA ZONA DEL VALLE
SELECT 
  A.NOMBRE,
  A.LOGIN,
  AR.DESCRIPCION AS AREA,
  Z.DESCRIPCION AS ZONA,
  P.DESCRIPCION AS PUESTO
FROM ALUMNOS A
JOIN AREA AR ON A.AREA = AR.IDAREA
JOIN ZONA Z ON A.ZONA = Z.IDZONA
JOIN PUESTO P ON A.PUESTO = P.IDPUESTO
WHERE Z.DESCRIPCION = 'DEL VALLE';

-- 3.3 MOSTRAR A TODOS LOS EMPLEADOS QUE LABOREN EN LA ZONA NARVARTE
SELECT 
  A.NOMBRE,
  A.LOGIN,
  AR.DESCRIPCION AS AREA,
  Z.DESCRIPCION AS ZONA,
  P.DESCRIPCION AS PUESTO
FROM ALUMNOS A
JOIN AREA AR ON A.AREA = AR.IDAREA
JOIN ZONA Z ON A.ZONA = Z.IDZONA
JOIN PUESTO P ON A.PUESTO = P.IDPUESTO
WHERE Z.DESCRIPCION = 'NARVARTE';

-- 3.4 AGRUPAR TODAS LAS PERSONAS POR AREA
SELECT 
  AR.DESCRIPCION AS AREA,
  COUNT(*) AS TOTAL_PERSONAS
FROM ALUMNOS A
JOIN AREA AR ON A.AREA = AR.IDAREA
GROUP BY AR.DESCRIPCION;

-- 3.5 CON UN CRUCE OBTENER EL SIGUIENTE RESULTADO
SELECT 
  A.NOMBRE,
  A.LOGIN,
  AR.DESCRIPCION AS AREA,
  Z.DESCRIPCION AS ZONA,
  P.DESCRIPCION AS PUESTO
FROM ALUMNOS A
JOIN AREA AR ON A.AREA = AR.IDAREA
JOIN ZONA Z ON A.ZONA = Z.IDZONA
JOIN PUESTO P ON A.PUESTO = P.IDPUESTO
ORDER BY A.LOGIN DESC;


-- =====================================
-- 6. STORED PROCEDURES
-- =====================================

-- CREAR UN SP CON UN PARAMETRO DE ENTRADA @IDZONA QUE MUESTRE TODOS LAS PERSONAS
-- DE LA ZONA INDICADA EN EL PARAMETRO.
DELIMITER //
CREATE PROCEDURE SP_MOSTRAR_PERSONAS_POR_ZONA(IN ID_ZONA INT)
BEGIN
	SELECT
		A.NOMBRE,
        A.LOGIN,
        AR.DESCRIPCION AS AREA,
        Z.DESCRIPCION AS ZONA,
        P.DESCRIPCION AS PUESTO
        FROM ALUMNOS A
        JOIN AREA AR ON A.AREA = AR.IDAREA
        JOIN ZONA Z ON A.ZONA = Z.IDZONA
        JOIN PUESTO P ON A.PUESTO = P.IDPUESTO
        WHERE Z.IDZONA = ID_ZONA;        
END //
DELIMITER ;

-- CREAR UN SP CON UN PARAMETRO DE ENTRADA @PUESTO QUE MUESTRE TODAS LAS PERSONAS
-- QUE TENGAN EL PUESTO INDICADO EN EL PARAMETRO.
DELIMITER //
CREATE PROCEDURE SP_MOSTRAR_PERSONAS_POR_PUESTOV2(IN NOMBRE_PUESTO VARCHAR(50))
BEGIN
    -- Verificamos si el puesto existe.
    IF NOT EXISTS (SELECT 1 FROM PUESTO WHERE DESCRIPCION = NOMBRE_PUESTO) THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'El puesto ingresado no existe';
    ELSE
        SELECT 
            A.NOMBRE,
            A.LOGIN,
            AR.DESCRIPCION AS AREA,
            Z.DESCRIPCION AS ZONA,
            P.DESCRIPCION AS PUESTO
        FROM ALUMNOS A
        JOIN AREA AR ON A.AREA = AR.IDAREA
        JOIN ZONA Z ON A.ZONA = Z.IDZONA
        JOIN PUESTO P ON A.PUESTO = P.IDPUESTO
        WHERE P.DESCRIPCION = NOMBRE_PUESTO;
    END IF;
END //
DELIMITER ;

-- CREAR UN SP PARA OBTENER EL SIGUIENTE RESULTADO
-- Conteo por Área

USE PERSONAL;
DELIMITER //

CREATE PROCEDURE SP_MOSTRAR_CONTEO_POR_AREA()
BEGIN
    SELECT
        'GENTE ASIGNADA' AS TIPO,
        SUM(CASE WHEN AR.DESCRIPCION = 'TELEFONIA' THEN 1 ELSE 0 END) AS TELEFONIA,
        SUM(CASE WHEN AR.DESCRIPCION = 'IMPLEMENTACION' THEN 1 ELSE 0 END) AS IMPLEMENTACION,
        SUM(CASE WHEN AR.DESCRIPCION = 'CAPACITACION' THEN 1 ELSE 0 END) AS CAPACITACION,
        SUM(CASE WHEN AR.DESCRIPCION = 'CALIDAD' THEN 1 ELSE 0 END) AS CALIDAD,
        SUM(CASE WHEN AR.DESCRIPCION = 'DESARROLLO' THEN 1 ELSE 0 END) AS DESARROLLO
    FROM ALUMNOS A
    JOIN AREA AR ON A.AREA = AR.IDAREA;
END //
DELIMITER ;

-- =====================================
-- 7. LLAMADAS SP DE PRUEBA
-- =====================================
CALL SP_MOSTRAR_PERSONAS_POR_ZONA(1);

CALL SP_MOSTRAR_PERSONAS_POR_PUESTOV2('EMPLEADO');

CALL SP_MOSTRAR_CONTEO_POR_AREA();